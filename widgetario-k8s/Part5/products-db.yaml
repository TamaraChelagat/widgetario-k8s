apiVersion: v1
kind: Service
metadata:
  name: products-db
  labels:
    app: products-db
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: products-db
  clusterIP: None  # Headless service for StatefulSet
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: products-db
  labels:
    app: products-db
spec:
  serviceName: products-db
  replicas: 2
  selector:
    matchLabels:
      app: products-db
  template:
    metadata:
      labels:
        app: products-db
    spec:
      securityContext:
        fsGroup: 999  # This gives permissions for the postgres user to access files
      containers:
      - name: db
        image: widgetario/products-db:postgres-replicated
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_PASSWORD
          value: postgres-password  # For simplicity in testing
        - name: POSTGRES_REPLICATION_PASSWORD
          value: postgres-password  # For simplicity in testing
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # Commented out probes to ensure basic functionality first
        # We can add these back once the pod is working
        # readinessProbe:
        #   exec:
        #     command: ["pg_isready", "-U", "postgres"]
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        # livenessProbe:
        #   exec:
        #     command: ["pg_isready", "-U", "postgres"]
        #   initialDelaySeconds: 60
        #   periodSeconds: 20
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: postgres-data  # Add subPath to avoid permission issues
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
