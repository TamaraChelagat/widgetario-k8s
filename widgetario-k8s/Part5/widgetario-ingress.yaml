---
# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: products-db-secrets
type: Opaque
data:
  POSTGRES_PASSWORD: UGFzc3dvcmQxMjM=  # Base64 encoded "Password123"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-config
data:
  api.json: |
    {
      "productsUrl": "http://products-api",
      "stockUrl": "http://stock-api"
    }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: widgetario-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  type: ClusterIP  # Changed from NodePort for production with Ingress
  selector:
    app: web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: widgetario/web:21.03
          ports:
            - containerPort: 80
          env:
            - name: Widgetario__Theme
              value: dark
          volumeMounts:
            - name: web-config
              mountPath: /app/secrets/api.json
              subPath: api.json
            - name: tmp-dir
              mountPath: /tmp
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 12  # Allow up to 1 minute for startup
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          securityContext:
            runAsUser: 1000
            runAsGroup: 3000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: web-config
          configMap:
            name: web-config
        - name: tmp-dir
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: products-api
spec:
  selector:
    app: products-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: products-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: products-api
  template:
    metadata:
      labels:
        app: products-api
    spec:
      containers:
        - name: products-api
          image: widgetario/products-api:21.03
          ports:
            - containerPort: 80
          env:
            - name: POSTGRES_CONNECTION_STRING
              value: "Server=products-db;Port=5432;Database=products;User Id=postgres;Password=$(POSTGRES_PASSWORD);"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: products-db-secrets
                  key: POSTGRES_PASSWORD
            - name: JAVA_OPTS
              value: "-Djava.io.tmpdir=/app/tmp"
          volumeMounts:
            - name: tmp-dir
              mountPath: /app/tmp
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 20
            periodSeconds: 10
            failureThreshold: 12
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          securityContext:
            runAsUser: 1000
            runAsGroup: 3000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: tmp-dir
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: stock-api
spec:
  selector:
    app: stock-api
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stock-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stock-api
  template:
    metadata:
      labels:
        app: stock-api
    spec:
      containers:
        - name: stock-api
          image: widgetario/stock-api:21.03
          ports:
            - containerPort: 8080
          env:
            - name: POSTGRES_CONNECTION_STRING
              value: "Server=products-db;Port=5432;Database=products;User Id=postgres;Password=$(POSTGRES_PASSWORD);"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: products-db-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 12
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          securityContext:
            runAsUser: 1000
            runAsGroup: 3000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: tmp-dir
          emptyDir: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: products-db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: products-db
spec:
  selector:
    app: products-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
# Changed from Deployment to StatefulSet for the database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: products-db
spec:
  serviceName: "products-db"
  replicas: 1
  selector:
    matchLabels:
      app: products-db
  template:
    metadata:
      labels:
        app: products-db
    spec:
      securityContext:
        fsGroup: 999  # PostgreSQL typically uses 999 as group ID
      containers:
        - name: products-db
          image: widgetario/products-db:21.03
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: products-db-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1"
          securityContext:
            runAsUser: 999  # PostgreSQL typically runs as user 999
            runAsGroup: 999
            runAsNonRoot: true
            allowPrivilegeEscalation: false
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: products-db-pvc
---
# Network Policy to restrict traffic between services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: web-policy
spec:
  podSelector:
    matchLabels:
      app: web
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # Allow ingress from anywhere (will be restricted by Ingress controller)
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: products-api
    ports:
    - protocol: TCP
      port: 80
  - to:
    - podSelector:
        matchLabels:
          app: stock-api
    ports:
    - protocol: TCP
      port: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: products-api-policy
spec:
  podSelector:
    matchLabels:
      app: products-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: web
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: products-db
    ports:
    - protocol: TCP
      port: 5432
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: stock-api-policy
spec:
  podSelector:
    matchLabels:
      app: stock-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: web
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: products-db
    ports:
    - protocol: TCP
      port: 5432
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: products-db-policy
spec:
  podSelector:
    matchLabels:
      app: products-db
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: products-api
    - podSelector:
        matchLabels:
          app: stock-api
    ports:
    - protocol: TCP
      port: 5432